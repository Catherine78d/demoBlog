security:

    # on définit l'encoder, c'est à dire que l'on définit dans quelle entité nous allons encoder une donnnée et par quel type d'encodage
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }

        in_database:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            #provider: users_in_memory

            # on définit par rapport à quel provider, quelles données de la BDD sont à comparer au moment de la connexion
            provider: in_database

            # on définit que la connexion s'établie via un formulaire de connexion
            form_login:
                login_path: security_login
                check_path: security_login
            
            # on definit la route de deconnexion et la route de redirection après déconnexion
            logout:
                path: security_logout
                target: blog

    # on définit que l'utilisateur ADMIN est aussi un role ROLE_USER, il a donc accès à tout le site
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login, roles: ROLE_USER }

    # Si un membre possèdant un rôle ROLE_USER en BDD et qu'il tente d'acceder au back office '/admin', on le redirige automatiquement vers la route '/blog'
    access_denied_url: blog
